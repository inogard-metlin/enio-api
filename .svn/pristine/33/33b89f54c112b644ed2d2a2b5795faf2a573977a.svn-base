package kr.co.inogard.enio.api.service.po;

import java.util.Collections;
import java.util.List;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeToken;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import kr.co.inogard.enio.api.commons.EnioContext;
import kr.co.inogard.enio.api.commons.constant.EnioMediaType;
import kr.co.inogard.enio.api.commons.handler.EnioValidateHandler;
import kr.co.inogard.enio.api.commons.util.RestTemplateFactory;
import kr.co.inogard.enio.api.domain.agent.Agent;
import kr.co.inogard.enio.api.domain.po.Po;
import kr.co.inogard.enio.api.domain.po.PoDto;
import kr.co.inogard.enio.api.domain.po.PoFile;
import kr.co.inogard.enio.api.domain.po.PoFileDto;
import kr.co.inogard.enio.api.domain.po.PoItem;
import kr.co.inogard.enio.api.domain.po.PoItemDto;
import kr.co.inogard.enio.api.domain.po.PoSrv;
import kr.co.inogard.enio.api.mappers.po.PoFileMapper;
import kr.co.inogard.enio.api.mappers.po.PoItemMapper;
import kr.co.inogard.enio.api.mappers.po.PoMapper;
import kr.co.inogard.enio.api.mappers.po.PoSrvMapper;
import kr.co.inogard.enio.api.security.ApiUserDetailsImpl;
import lombok.extern.slf4j.Slf4j;

@Service
@Transactional
@Slf4j
public class PoSendService {

  @Autowired
  private PoMapper poMapper;

  @Autowired
  private PoItemMapper poItemMapper;

  @Autowired
  private PoSrvMapper poSrvMapper;

  @Autowired
  private PoFileMapper poFileMapper;

  @Autowired
  private ModelMapper modelMapper;

  @Autowired
  private EnioValidateHandler enioValidateHandler;

  @Autowired
  private RestTemplateFactory restTemplateFactory;

  // @Value("${enio.agent.uri-path-po}")
  private String poAgentUriPath;

  public Po createPo(String poNo) {
    Po po = poMapper.findByPoNo(poNo);
    PoDto.Create poDto = modelMapper.map(po, PoDto.Create.class);

    List<PoItem> poItemList = poItemMapper.findPoItemByPoNo(poNo);
    List<PoSrv> poSrvList = null;
    for (PoItem xPoItem : poItemList) {
      poSrvList = poSrvMapper.findPoSrvByPoNo(xPoItem);
      xPoItem.setSrvList(poSrvList);
    }

    List<PoItemDto.Create> poItemDtoList =
        modelMapper.map(poItemList, new TypeToken<List<PoItemDto>>() {}.getType());
    poDto.setPoItem(poItemDtoList);

    List<PoFile> poFileList = poFileMapper.findPoFileByPoNo(poNo);
    List<PoFileDto.Create> poFileDtoList =
        modelMapper.map(poFileList, new TypeToken<List<PoFileDto>>() {}.getType());
    poDto.setPoFile(poFileDtoList);

    enioValidateHandler.validate(poDto);
    log.debug("## CREATE PO ## : {}", poDto.getPoNo());

    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
    Agent agt = ((ApiUserDetailsImpl) authentication.getPrincipal()).getAgent();

    EnioContext.local.set(new EnioContext(agt.getAgtCd(), agt.getRawLicenceKey()));
    RestTemplate rtClient = restTemplateFactory.create(agt.getAgtCd(), agt.getRawLicenceKey());

    HttpHeaders header = new HttpHeaders();
    header.setContentType(EnioMediaType.APPLICATION_ENIO_JSON_UTF8.getMediaType());
    header.setAccept(
        Collections.singletonList(EnioMediaType.APPLICATION_ENIO_JSON_UTF8.getMediaType()));
    HttpEntity<PoDto.Create> requestEntity = new HttpEntity<PoDto.Create>(poDto, header);

    String url = agt.getConnUrl() + poAgentUriPath;
    PoDto.Response res = null;

    try {
      res = rtClient.postForObject(url, requestEntity, PoDto.Response.class);

    } catch (HttpClientErrorException e) {
      e.getResponseBodyAsString();
      log.debug("error : {}", e.getResponseBodyAsString());
    }
    EnioContext.local.remove();

    log.debug("res.getRsltCd() : {}", res.getRsltCd());
    log.debug("res.getRsltMsg() : {}", res.getRsltMsg());
    log.info("enio 데이터 전송완료");

    return po;
  }
}
